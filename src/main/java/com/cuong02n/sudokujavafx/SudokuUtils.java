package com.cuong02n.sudokujavafx;

import javax.swing.text.Utilities;
import java.util.Collections;
import java.util.Random;
import java.util.Vector;

import static com.cuong02n.sudokujavafx.Main.*;

public class SudokuUtils {
    static boolean[][] rows;
    static boolean[][] columns;
    static boolean[][] squares;
    private static Vector<Integer>[][] arrayRandomForEachCell;

    //
    public static final int[][][] squareIndex = {
            {},
            {},
            {},
            {},
            {
                    {0, 0, 1, 1},
                    {0, 0, 1, 1},
                    {2, 2, 3, 3},
                    {2, 2, 3, 3}},

            {
                    {1, 1, 1, 0, 0},
                    {1, 1, 2, 0, 0},
                    {3, 2, 2, 2, 0},
                    {3, 3, 2, 4, 4},
                    {3, 3, 4, 4, 4}},
            {
                    {0, 0, 0, 1, 1, 1},
                    {0, 0, 0, 1, 1, 1},
                    {2, 2, 2, 3, 3, 3},
                    {2, 2, 2, 3, 3, 3},
                    {4, 4, 4, 5, 5, 5},
                    {4, 4, 4, 5, 5, 5}
            },
            {
                    {0, 0, 0, 1, 2, 2, 2},
                    {0, 0, 0, 1, 3, 2, 2},
                    {0, 1, 1, 1, 3, 2, 2},
                    {1, 1, 3, 3, 3, 5, 5},
                    {4, 4, 3, 5, 5, 5, 6},
                    {4, 4, 3, 5, 6, 6, 6},
                    {4, 4, 4, 5, 6, 6, 6},
            },
            {
                    {0, 0, 0, 0, 1, 1, 1, 1},
                    {0, 0, 0, 0, 1, 1, 1, 1},
                    {2, 2, 2, 2, 3, 3, 3, 3},
                    {2, 2, 2, 2, 3, 3, 3, 3},
                    {4, 4, 4, 4, 5, 5, 5, 5},
                    {4, 4, 4, 4, 5, 5, 5, 5},
                    {6, 6, 6, 6, 7, 7, 7, 7},
                    {6, 6, 6, 6, 7, 7, 7, 7}
            },
            {
                    {0, 0, 0, 1, 1, 1, 2, 2, 2},
                    {0, 0, 0, 1, 1, 1, 2, 2, 2},
                    {0, 0, 0, 1, 1, 1, 2, 2, 2},
                    {3, 3, 3, 4, 4, 4, 5, 5, 5},
                    {3, 3, 3, 4, 4, 4, 5, 5, 5},
                    {3, 3, 3, 4, 4, 4, 5, 5, 5},
                    {6, 6, 6, 7, 7, 7, 8, 8, 8},
                    {6, 6, 6, 7, 7, 7, 8, 8, 8},
                    {6, 6, 6, 7, 7, 7, 8, 8, 8}
            },
            {
                    {0, 0, 0, 0, 0, 1, 1, 1, 1, 1},
                    {0, 0, 0, 0, 0, 1, 1, 1, 1, 1},
                    {2, 2, 2, 2, 2, 3, 3, 3, 3, 3},
                    {2, 2, 2, 2, 2, 3, 3, 3, 3, 3},
                    {4, 4, 4, 4, 4, 5, 5, 5, 5, 5},
                    {4, 4, 4, 4, 4, 5, 5, 5, 5, 5},
                    {6, 6, 6, 6, 6, 7, 7, 7, 7, 7},
                    {6, 6, 6, 6, 6, 7, 7, 7, 7, 7},
                    {8, 8, 8, 8, 8, 9, 9, 9, 9, 9},
                    {8, 8, 8, 8, 8, 9, 9, 9, 9, 9}
            },
            {
                    {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2},
                    {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2},
                    {0, 0, 0, 4, 4, 4, 1, 1, 2, 2, 2},
                    {3, 3, 3, 4, 4, 4, 4, 1, 2, 2, 5},
                    {3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5},
                    {3, 3, 3, 6, 6, 6, 7, 7, 7, 5, 5},
                    {3, 3, 6, 6, 6, 6, 7, 7, 7, 5, 5},
                    {8, 8, 6, 6, 6, 6, 7, 7, 7, 5, 5},
                    {8, 8, 8, 9, 9, 9, 7, 7, 10, 10, 10},
                    {8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10},
                    {8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10}
            },
            {
                    {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2},
                    {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2},
                    {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2},
                    {3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5},
                    {3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5},
                    {3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5},
                    {6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8},
                    {6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8},
                    {6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8},
                    {9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11},
                    {9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11},
                    {9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11}
            },
            {
                    {0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3},
                    {0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3},
                    {0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3},
                    {0, 0, 0, 0, 1, 1, 2, 2, 2, 3, 4, 4, 4},
                    {5, 5, 5, 5, 1, 1, 6, 2, 4, 4, 4, 4, 4},
                    {5, 5, 5, 5, 5, 6, 6, 6, 4, 4, 4, 4, 4},
                    {5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7},
                    {8, 8, 8, 8, 8, 6, 6, 6, 7, 7, 7, 7, 7},
                    {8, 8, 8, 8, 8, 9, 6, 10, 10, 7, 7, 7, 7},
                    {8, 8, 8, 11, 9, 9, 9, 10, 10, 12, 12, 12, 12},
                    {11, 11, 11, 11, 9, 9, 9, 10, 10, 10, 12, 12, 12},
                    {11, 11, 11, 11, 9, 9, 9, 10, 10, 10, 12, 12, 12},
                    {11, 11, 11, 11, 9, 9, 9, 10, 10, 10, 12, 12, 12}
            },
            {
                    {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1},
                    {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1},
                    {2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3},
                    {2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3},
                    {4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5},
                    {4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5},
                    {6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7},
                    {6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7},
                    {8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9},
                    {8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9},
                    {10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11},
                    {10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11},
                    {12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13},
                    {12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13}
            },
            {
                    {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2},
                    {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2},
                    {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2},
                    {3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5},
                    {3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5},
                    {3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5},
                    {6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8},
                    {6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8},
                    {6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8},
                    {9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11},
                    {9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11},
                    {9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11},
                    {12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14},
                    {12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14},
                    {12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14}
            },
            {
                    {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3},
                    {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3},
                    {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3},
                    {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3},
                    {4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7},
                    {4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7},
                    {4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7},
                    {4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7},
                    {8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11},
                    {8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11},
                    {8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11},
                    {8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11},
                    {12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15},
                    {12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15},
                    {12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15},
                    {12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15}
            },
            {
                    {0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3},
                    {0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3},
                    {0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3},
                    {0, 0, 0, 0, 5, 5, 1, 1, 1, 6, 6, 6, 2, 2, 3, 3, 3},
                    {4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 3, 3, 3},
                    {4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 3, 3},
                    {4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 8, 8, 8, 9, 9},
                    {4, 4, 4, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9},
                    {10, 4, 4, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9},
                    {10, 10, 10, 10, 7, 7, 7, 12, 12, 8, 8, 8, 9, 9, 9, 9, 9},
                    {10, 10, 10, 10, 7, 7, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9},
                    {10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16},
                    {10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 16, 16, 16, 16, 16},
                    {13, 13, 13, 13, 11, 11, 11, 11, 14, 14, 14, 15, 15, 16, 16, 16, 16},
                    {13, 13, 13, 13, 11, 11, 11, 14, 14, 14, 14, 15, 15, 15, 16, 16, 16},
                    {13, 13, 13, 13, 11, 11, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15},
                    {13, 13, 13, 13, 13, 11, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15}
            },
            {
                    {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2},
                    {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2},
                    {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2},
                    {3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5},
                    {3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5},
                    {3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5},
                    {6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8},
                    {6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8},
                    {6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8},
                    {9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11},
                    {9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11},
                    {9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11},
                    {12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14},
                    {12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14},
                    {12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14},
                    {15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17},
                    {15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17},
                    {15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17}
            },
            {},//19
            {
                    {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3},
                    {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3},
                    {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3},
                    {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3},
                    {4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7},
                    {4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7},
                    {4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7},
                    {4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7},
                    {8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11},
                    {8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11},
                    {8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11},
                    {8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11},
                    {12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15},
                    {12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15},
                    {12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15},
                    {12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15},
                    {16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19},
                    {16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19},
                    {16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19},
                    {16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19}
            }
    };

    public static void generateSudokuBoard(int size, int hardMode) {
        //noinspection unchecked
        arrayRandomForEachCell = new Vector[size][size];
        Vector<Integer> randomForEachCell = new Vector<>();
        rows = new boolean[size][size + 1];
        columns = new boolean[size][size + 1];
        squares = new boolean[size][size + 1];

        for (int e = 1; e <= size; e++) {
            randomForEachCell.add(e);
        }

        for (int i = 0; i < size; i++) {
            for (int value = 1; value <= size; value++) {
                rows[i][value] = true;
                columns[i][value] = true;
                squares[i][value] = true;
            }
        }
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                //noinspection unchecked
                arrayRandomForEachCell[i][j] = (Vector<Integer>) randomForEachCell.clone();
                Collections.shuffle(arrayRandomForEachCell[i][j]);
            }
        }
        Main.solution = new int[size][size];
        Main.boardNow = new int[size][size];
        solveSudoku(0, 0);

        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                boardNow[i][j] = solution[i][j];
            }
        }
        SudokuUtils.makeRandomForHardMode(hardMode);
    }

    private static void makeRandomForHardMode(int hardMode) {
        double removeRate;
        switch (hardMode){
            case 0->
                removeRate = 0.3;
            case 1->
                removeRate = 0.4;
            case 2->
                removeRate = 0.55;
            case 3->
                removeRate = 0.7;
            default->
                removeRate = 0;
        }
        Random r=  new Random();
        for(int i = 0;i<boardNow.length;i++){
            for (int j = 0; j < boardNow[i].length; j++) {
                if(r.nextDouble()<removeRate){
                    boardNow[i][j] = 0;
                }
            }
        }
    }

    public static boolean checkAvailableForValue(int value, int i, int j) {
        return rows[i][value] && columns[j][value] && squares[squareIndex[currentSize][i][j]][value];
    }

    public static boolean solveSudoku(int i, int j) {
        for (int value : arrayRandomForEachCell[i][j]) {
            if (checkAvailableForValue(value, i, j)) {
                Main.solution[i][j] = value;
                rows[i][value] = false;
                columns[j][value] = false;
                squares[squareIndex[currentSize][i][j]][value] = false;
                if (j == currentSize - 1) {
                    if (i == currentSize - 1) {
                        return true;
                    } else {
                        if (solveSudoku(i + 1, 0)) {
                            return true;
                        }
                    }
                } else {
                    if (solveSudoku(i, j + 1)) {
                        return true;
                    }
                }
                Main.boardNow[i][j] = 0;
                rows[i][value] = true;
                columns[j][value] = true;
                squares[squareIndex[currentSize][i][j]][value] = true;
            }
        }
        return false;
    }

    public static boolean validSudokuBoard(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (!checkCellValid(i, j, board)) {
                    return false;
                }
            }
        }
        return true;
    }

    public static boolean checkCellValid(int i, int j, int[][] board) {
        for (int i1 = 0; i1 < board.length; i1++) {
            if (board[i1][j] == board[i][j] && i1 != i)
                return false;
        }
        for (int j1 = 0; j1 < board.length; j1++) {
            if (board[i][j1] == board[i][j] && j1 != j)
                return false;
        }
        for (int i1 = 0; i1 < board.length; i1++) {
            for (int j1 = 0; j1 < board[i1].length; j1++) {
                if (i1 == i && j1 == j) {
                    continue;
                }
                if (board[i1][j1] == board[i][j] && squareIndex[board.length][i1][j1] == squareIndex[board.length][i][j])
                    return false;
            }
        }
        return true;
    }

    public static int getIntByStr(String x) {
        return switch (x) {
            case "A" -> 10;
            case "B" -> 11;
            case "C" -> 12;
            case "D" -> 13;
            case "E" -> 14;
            case "F" -> 15;
            case "G" -> 16;
            default -> throw new RuntimeException("NOT EXCEPTED VALUE");
        };
    }

    public static String getStrByInt(int x) {
        if (x < 10) {
            return x + "";
        }
        return switch (x) {
            case 10 -> "A";
            case 11 -> "B";
            case 12 -> "C";
            case 13 -> "D";
            case 14 -> "E";
            case 15 -> "F";
            case 16 -> "G";
            default -> throw new RuntimeException("NOT EXCEPTED VALUE");
        };
    }


}
